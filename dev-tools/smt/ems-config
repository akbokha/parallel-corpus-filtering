################################################
### CONFIGURATION FILE FOR AN SMT EXPERIMENT ###
################################################

[GENERAL]

working-dir = /home/pkoehn/statmt/project/cleaneval/test/smt
moses-src-dir = /home/pkoehn/moses
external-bin-dir = /home/pkoehn/statmt/bin
cleaneval-data = /home/pkoehn/statmt/project/cleaneval/dev-tools/dev-sets
my-corpus-stem = /home/pkoehn/statmt/project/cleaneval/my-stem

### You do not need to change anything below

moses-script-dir = $moses-src-dir/scripts
moses-bin-dir = $moses-src-dir/bin
decoder = $moses-src-dir/bin/moses

ttable-binarizer = $moses-src-dir/bin/processPhraseTableMin

input-tokenizer = "$moses-script-dir/tokenizer/normalize-punctuation.perl $input-extension | $moses-script-dir/tokenizer/tokenizer.perl -a -l $input-extension"
output-tokenizer = "$moses-script-dir/tokenizer/normalize-punctuation.perl $output-extension | $moses-script-dir/tokenizer/tokenizer.perl -a -l $output-extension"
input-truecaser = $moses-script-dir/recaser/truecase.perl
output-truecaser = $moses-script-dir/recaser/truecase.perl
detruecaser = $moses-script-dir/recaser/detruecase.perl

input-extension = de
output-extension = en
pair-extension = de-en

### generic parallelizer for cluster and multi-core machines
# you may specify a script that allows the parallel execution
# parallizable steps (see meta file). you also need specify
# the number of jobs (cluster) or cores (multicore)
#
#generic-parallelizer = $moses-script-dir/ems/support/generic-parallelizer.perl
#generic-parallelizer = $moses-script-dir/ems/support/generic-multicore-parallelizer.perl

### cluster settings (if run on a cluster machine)
# number of jobs to be submitted in parallel
#
#jobs = 10

# arguments to qsub when scheduling a job
#qsub-settings = "-l 'arch=*64'"
#cache-model = "/mnt/data/pkoehn/cache"

#################################################################
# PARALLEL CORPUS PREPARATION: 
# create a tokenized, sentence-aligned corpus, ready for training

[CORPUS]

### tools to use to prepare the data
#
#tokenizer = 
#lowercaser = 

### long sentences are filtered out, since they slow down GIZA++ 
# and are a less reliable source of data. set here the maximum
# length of a sentence
#
max-sentence-length = 80

[CORPUS:subsample]

### command to run to get raw corpus files
#
# get-corpus-script = $europarl-v3/get-parallel-corpus.perl

### raw corpus files (untokenized, but sentence aligned)
# 
raw-stem = $my-corpus-stem

### tokenized corpus files (may contain long sentences)
#
#tokenized-stem =

### long sentences are filtered out, since they slow down GIZA++ 
# and are a less reliable source of data. set here the maximum
# length of a sentence
#
#max-sentence-length = 80

### if sentence filtering should be skipped,
# point to the clean training data
#
#clean-stem = 

### if corpus preparation should be skipped,
# point to the prepared training data
#
#lowercased-stem = 

#################################################################
# LANGUAGE MODEL TRAINING

[LM]

### tool to be used for language model training
# for instance: ngram-count (SRILM), train-lm-on-disk.perl (Edinburgh) 
# 
lm-training = "$moses-script-dir/ems/support/lmplz-wrapper.perl -bin $moses-bin-dir/lmplz"
settings = "--prune '0 0 1' -T $working-dir/lm -S 10G"
order = 5

### script to use for binary table format
# (default: no binarization)
#
#lm-binarizer = $moses-src-dir/irstlm/bin/compile-lm

### script to create quantized language model format
# (default: no quantization)
# 
#lm-quantizer = $moses-src-dir/irstlm/bin/quantize-lm

lm-binarizer = $moses-src-dir/bin/build_binary
type = 8


### tools to use to prepare the data
#
#tokenizer = 
#lowercaser = 

### each language model to be used has its own section here

[LM:subsample] 

### command to run to get raw corpus files
#
#get-corpus-script = "$europarl-v3/get-lm-corpus.perl $output-extension"

### raw corpus (untokenized)
#
raw-corpus = $my-corpus-stem.$output-extension

### tokenized corpus files (may contain long sentences)
#
#tokenized-corpus = 

### if corpus preparation should be skipped, 
# point to the prepared language model
#
#lm = 

#################################################################
# INTERPOLATING LANGUAGE MODELS

[INTERPOLATED-LM] IGNORE

# if multiple language models are used, these may be combined
# by optimizing perplexity on a tuning set
# see, for instance [Koehn and Schwenk, IJCNLP 2008]

### directory that includes srilm binaries
#
#srilm-dir = 

### script to interpolate language models
# if commented out, no interpolation is performed
#
script = $moses-script-dir/ems/support/interpolate-lm.perl

### group language models for hierarchical interpolation
# (flat interpolation is limited to 10 language models)
#group = 

### tuning set
# you may use the same set that is used for mert tuning (reference set)
#
raw-tuning = $working-dir/data/tune.txt.$output-extension

# irstlm
#lm-binarizer = $moses-src-dir/irstlm/bin/compile-lm

# kenlm, also set type to 8
lm-binarizer = $moses-src-dir/bin/build_binary
type = 8

#################################################################
# FACTOR DEFINITION

[INPUT-FACTOR]

# also used for output factors
temp-dir = $working-dir/training/factor

#################################################################
# TRANSLATION MODEL TRAINING

[TRAINING]

### training script to be used: either a legacy script or 
# current moses training script (default) 
# 
script = $moses-script-dir/training/train-model.perl

### general options
#
training-options = "-sort-buffer-size 20G -sort-compress gzip -cores 10"
#binarize-all = $moses-script-dir/training/binarize-model.perl
fast-align-settings = "-d -o -v"
fast-align-max-lines = 1000000

### symmetrization method to obtain word alignments from giza output
# (commonly used: grow-diag-final-and)
#
alignment-symmetrization-method = grow-diag-final-and

#run-giza-in-parts = 50

### lexicalized reordering: specify orientation type
# (default: only distance-based reordering model)
#
lexicalized-reordering = hier-mslr-bidirectional-fe

### factored training: specify here which factors used
# if none specified, single factor training is assumed
# (one translation step, surface to surface)
#
#input-factors = word lemma morph
#output-factors = word lemma pos
#input-factors = word lemma morph
#output-factors = word lemma pos
#alignment-factors = "word -> word"
#translation-factors = "word+lemma+morph -> word+lemma+pos, lemma -> lemma, morph -> pos"
#reordering-factors = "lemma -> lemma, morph -> pos"
#generation-factors = "lemma -> pos, pos+lemma -> word"
#decoding-steps = "t0:t1,g0,t2,g1"
#decoding-graph-backoff = "0 1"

### if word alignment (giza symmetrization) should be skipped,
# point to word alignment files
#
#word-alignment = $working-dir/model/aligned.2

#srilm-dir = i
#operation-sequence-model = "yes"
#operation-sequence-model-order = 5
#operation-sequence-model-settings = "--factor 0-0 -lmplz '$moses-src-dir/bin/lmplz -S 10G --discount_fallback'"

### hierarchical rule set
#
#hierarchical-rule-set = true
#domain-features = "indicator"
score-settings = " --GoodTuring --MinScore 2:0.0001"
#score-settings = " --GoodTuring --CountBinFeature 1 2 3 4 6 10 --MinScore 2:0.0001"
#sparse-features = "target-word-insertion top 50, source-word-deletion top 50, word-translation top 50 50, phrase-length"

### include word alignment in phrase table
#
max-phrase-length = 5

### if phrase extraction should be skipped,
# point to stem for extract files
#
# extracted-phrases = 

### if phrase table training should be skipped,
# point to phrase translation table
#
# phrase-translation-table = 

### if reordering table training should be skipped,
# point to reordering table
#
# reordering-table = 

### if training should be skipped, 
# point to a configuration file that contains
# pointers to all relevant model files
#
#config = $working-dir/data/moses.ini.5.wo-all

#####################################################
### TUNING: finding good weights for model components

[TUNING]

### instead of tuning with this setting, old weights may be recycled
# specify here an old configuration file with matching weights
#
#filtered-dir = 

### tuning script to be used
#
tuning-script = $moses-script-dir/training/mert-moses.pl
tuning-settings = "-mertdir $moses-src-dir/bin --batch-mira --return-best-dev -maximum-iterations 20"

### specify the corpus used for tuning 
# it should contain 100s if not 1000s of sentences
#
input-sgm = $cleaneval-data/newstest2016-${input-extension}${output-extension}-src.$input-extension.sgm
# tokenized-input = 
# factorized-input = 
# input =
# 
reference-sgm = $cleaneval-data/newstest2016-${input-extension}${output-extension}-ref.$output-extension.sgm
# tokenized-reference = 
# factorized-reference = 
# reference = 

### size of n-best list used (typically 100)
#
nbest = 200

### ranges for weights for random initialization
# if not specified, the tuning script will use generic ranges
# it is not clear, if this matters
#
# lambda = 

### additional flags for the decoder
#
decoder-settings = "-mp -search-algorithm 1 -cube-pruning-pop-limit 1000 -s 1000 -threads 10 -max-trans-opt-per-coverage 100"

### if tuning should be skipped, specify this here
# and also point to a configuration file that contains
# pointers to all relevant model files
#
#config = 
#config-with-reused-weights = $working-dir/data/moses.tuned.ini.5.new

#########################################################
## RECASER: restore case, this part only trains the model

[RECASING]

#decoder = $moses-src-dir/moses-cmd/src/moses.1521.srilm

### training data
# raw input needs to be still tokenized,
# also also tokenized input may be specified
#
#tokenized = [LM:europarl:tokenized-corpus]

# recase-config = 

#lm-training = $moses-src-dir/srilm/bin/i686/ngram-count

#######################################################
## TRUECASER: train model to truecase corpora and input

[TRUECASER]

### script to train truecaser models
#
trainer = $moses-script-dir/recaser/train-truecaser.perl

### training data
# raw input needs to be still tokenized,
# also also tokenized input may be specified
#
# tokenized-stem = $working-dir/data/ep+nc

### trained model
#
#truecase-model = 

############################################################
## EVALUATION: translating a test set using the tuned system

[EVALUATION]

### number of jobs (if parallel execution of testing)
#
decoder-settings = "-mbr -mp -search-algorithm 1 -cube-pruning-pop-limit 5000 -s 5000 -threads 10 -max-trans-opt-per-coverage 100"

### prepare system output for scoring 
# this may include detokenization and wrapping output in sgm 
# (needed for nist-bleu, ter, meteor)
#
detokenizer = "$moses-script-dir/tokenizer/detokenizer.perl -l $output-extension"
#recaser = $moses-script-dir/recaser/recase.perl
wrapping-script = "$moses-script-dir/ems/support/wrap-xml.perl $output-extension"
# output-sgm = 

### should output be scored case-sensitive (default: no)?
#
# case-sensitive = yes

### BLEU
#
nist-bleu = $moses-script-dir/generic/mteval-v13a.pl
nist-bleu-c = "$moses-script-dir/generic/mteval-v13a.pl -c"
#multi-bleu = $moses-script-dir/generic/multi-bleu.perl
#multi-bleu-c = "$moses-script-dir/generic/multi-bleu.perl -lc"
#multi-bleu-detok = $moses-script-dir/generic/multi-bleu-detok.perl
#multi-bleu-c-detok = "$moses-script-dir/generic/multi-bleu-detok.perl -lc"
# ibm-bleu =

### TER: translation error rate (BBN metric) based on edit distance
#
# ter = $edinburgh-script-dir/tercom_v6a.pl

### METEOR: gives credit to stem / worknet synonym matches
#
# meteor = 

### Analysis: carry out various forms of analysis on the output
#
analysis = $moses-script-dir/ems/support/analysis.perl
analyze-coverage = yes
report-segmentation = yes

[EVALUATION:newstest2017]
input-sgm = $cleaneval-data/newstest2017-${input-extension}${output-extension}-src.$input-extension.sgm
wrapping-frame = $input-sgm
reference-sgm = $cleaneval-data/newstest2017-${input-extension}${output-extension}-ref.$output-extension.sgm

[REPORTING]

### what to do with result (default: store in file evaluation/report)
# 
# email = pkoehn@inf.ed.ac.uk

